A = matrix(c(30, 2, 3, 12), nrow=2, ncol=2, byrow = TRUE) 
amma <- gamma                # use the same value for 5 community detection result
M0 <- 1:ncol(A)            
diag(A) <- 0
n <- ncol(A)
s <- sum(A)                             # s
if (min(A) < 0) {
        warning("Matrix contains negative weights: absolute weights were used")
        A <- abs(A)
  }
Mb <- M0
M <- M0

# mat 
mat <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) for (j in 1:n) {
        mat[i, j] <- (colSums(A)[i] * rowSums(A)[j])/s
    }
B <- A - (gamma * (mat))
B <- (B + t(B))/2                        # B

# Hnm
Hnm <- matrix(0, nrow = nrow(A), ncol = (length(unique(Mb))))
for (m in 1:max(Mb)) {
        if (!is.null(nrow(B[, which(Mb == m)]))) {
            Hnm[, m] <- rowSums(B[, which(Mb == m)])
        }
        else {
            Hnm[, m] <- B[, which(Mb == m)]
        }
    }

H <- colSums(Hnm)
Hm <- rowSums(Hnm)
Q0 <- (-Inf)
bsxfun <- matrix(0, nrow = n, ncol = n)
diag(bsxfun) <- 1


# Moduarity

Q <- sum(diag(as.matrix(B) * bsxfun))/s        # bsxfun = identity mat?
Q
